name: Azure Deployment

on:
  workflow_dispatch:
    inputs:
      customer:
        description: 'Select customer'
        required: true
        type: choice
        options:
          - hyc
          - stttelemedia
      environment:
        description: 'Select environment'
        required: true
        type: choice
        options:
          - dev
          - prod
      action:
        description: 'Terraform Action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

jobs:
  terraform:
    name: Azure Terraform Workflow
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    env:
      TF_IN_AUTOMATION: true
      CUSTOMER: ${{ github.event.inputs.customer }}
      ENVIRONMENT: ${{ github.event.inputs.environment }}
      ACTION: ${{ github.event.inputs.action }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Azure Login via OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Export Terraform ENV variables
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init -input=false -reconfigure

      - name: Handle Workspace
        run: |
          WORKSPACE="${CUSTOMER}-${ENVIRONMENT}"
          echo "Using workspace: $WORKSPACE"
          terraform workspace list | grep "$WORKSPACE" && terraform workspace select "$WORKSPACE" || terraform workspace new "$WORKSPACE"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          TFVARS="customer/${CUSTOMER}.tfvars"
          if [ "$ACTION" = "destroy" ]; then
            terraform plan -destroy -input=false -var-file="$TFVARS" -out=tfplan
            terraform show tfplan
          else
            terraform plan -input=false -var-file="$TFVARS" -out=tfplan
            terraform show tfplan

      - name: Terraform Apply or Destroy
        run: |
          TFVARS="customer/${CUSTOMER}.tfvars"
          case "$ACTION" in
            apply)
              echo "✅ Applying changes"
              terraform apply -input=false -auto-approve tfplan
              ;;
            destroy)
              echo "⚠️ Destroying infrastructure"
              terraform destroy -input=false -auto-approve -var-file="$TFVARS"
              ;;
            *)
              echo "❌ Invalid action: $ACTION. Only 'apply' or 'destroy' are allowed here."
              exit 1
              ;;
          esac
