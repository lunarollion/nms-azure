name: Terraform Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      customer:
        description: 'Select customer'
        required: true
        type: choice
        options:
          - hyc
          - stttelemedia
      environment:
        description: 'Select environment'
        required: true
        type: choice
        options:
          - dev
          - prod
      action:
        description: 'Terraform Action'
        required: true
        type: choice
        options:
          - apply
          - destroy

jobs:
  terraform:
    name: Terraform Workflow with OIDC & Manual Inputs
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    env:
      TF_IN_AUTOMATION: true
      CUSTOMER: ${{ github.event.inputs.customer }}
      ENVIRONMENT: ${{ github.event.inputs.environment }}
      ACTION: ${{ github.event.inputs.action }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Azure Login via OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          audience: api://AzureADTokenExchange

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init -input=false

      - name: Handle Workspace
        run: |
          WORKSPACE="${CUSTOMER}-${ENVIRONMENT}"
          if terraform workspace list | grep -q "$WORKSPACE"; then
            terraform workspace select "$WORKSPACE"
          else
            terraform workspace new "$WORKSPACE"
          fi

      - name: Terraform Format Check
        run: terraform fmt -check -recursive -diff

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        run: |
          TFVARS="customer/${CUSTOMER}.tfvars"
          if [ "$ACTION" = "destroy" ]; then
            terraform plan -destroy -input=false -var-file="$TFVARS" -out=tfplan
          else
            terraform plan -input=false -var-file="$TFVARS" -out=tfplan
          fi

      - name: Terraform Apply or Destroy
        run: |
          if [ "$ACTION" = "destroy" ]; then
            terraform apply -input=false -auto-approve tfplan
          else
            terraform apply -input=false -auto-approve tfplan
          fi
