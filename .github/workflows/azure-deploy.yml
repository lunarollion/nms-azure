name: Azure Deployment

on:
  workflow_dispatch:
    inputs:
      customer:
        description: 'Select customer'
        required: true
        type: choice
        options:
          - hyc
          - stttelemedia
      environment:
        description: 'Select environment'
        required: true
        type: choice
        options:
          - dev
          - prod
      action:
        description: 'Terraform Action'
        required: true
        type: choice
        options:
          - apply
          - destroy

jobs:
  terraform:
    name: Azure Workflow
    runs-on: ubuntu-latest

    permissions:
      id-token: write      # Needed for OIDC
      contents: read

    env:
      TF_IN_AUTOMATION: true
      CUSTOMER: ${{ github.event.inputs.customer || 'hyc' }}
      ENVIRONMENT: ${{ github.event.inputs.environment || 'prod' }}
      ACTION: ${{ github.event.inputs.action || 'apply' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Azure Login via OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Export Terraform ENV variables for OIDC
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5
          terraform_wrapper: false

      - name: Terraform Init (Reconfigure Backend)
        run: |
          terraform init -input=false -reconfigure

      - name: Handle Workspace
        run: |
          WORKSPACE="${CUSTOMER}-${ENVIRONMENT}"
          echo "Using workspace: $WORKSPACE"
          if terraform workspace list | grep -q "$WORKSPACE"; then
            terraform workspace select "$WORKSPACE"
          else
            terraform workspace new "$WORKSPACE"
          fi

      - name: Terraform Format Check
        run: terraform fmt -check -recursive -diff

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Debug Terraform Workspace & State
        run: |
          echo "Current Workspace:"
          terraform workspace show

          echo "Listing state contents (if any):"
          terraform state list || echo "No resources found in state"

      - name: Terraform Plan
        run: |
          TFVARS="customer/${CUSTOMER}.tfvars"
          if [ "$ACTION" = "destroy" ]; then
            terraform plan -destroy -input=false -var-file="$TFVARS" -out=tfplan
            terraform show tfplan
          else
            terraform plan -input=false -var-file="$TFVARS" -out=tfplan
          fi

      - name: Terraform Apply or Destroy
        run: |
          TFVARS="customer/${CUSTOMER}.tfvars"
          if [ "$ACTION" = "destroy" ]; then
            echo "⚠️ Executing terraform destroy"
            terraform destroy -input=false -auto-approve -var-file="$TFVARS"
          else
            terraform apply -input=false -auto-approve tfplan
          fi
